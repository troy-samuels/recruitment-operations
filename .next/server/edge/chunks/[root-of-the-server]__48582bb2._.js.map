{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\nimport type { Database } from './types'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => {\n            request.cookies.set(name, value)\n          })\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) => {\n            supabaseResponse.cookies.set(name, value, options)\n          })\n        },\n      },\n    }\n  )\n\n  // Refresh the session if it exists\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  // Protect authenticated routes\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/signup') &&\n    request.nextUrl.pathname !== '/'\n  ) {\n    const url = request.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.redirect(url)\n  }\n\n  // Redirect authenticated users away from auth pages\n  if (\n    user &&\n    (request.nextUrl.pathname.startsWith('/login') ||\n      request.nextUrl.pathname.startsWith('/signup'))\n  ) {\n    const url = request.nextUrl.clone()\n    url.pathname = '/dashboard'\n    return NextResponse.redirect(url)\n  }\n\n  return supabaseResponse\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAGO,eAAe,cAAc,OAAoB;IACtD,IAAI,mBAAmB,gMAAY,CAAC,IAAI,CAAC;QACvC;IACF;IAEA,MAAM,WAAW,IAAA,uMAAkB,sUAGjC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;oBAC5C,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBAC5B;gBACA,mBAAmB,gMAAY,CAAC,IAAI,CAAC;oBACnC;gBACF;gBACA,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;oBAC5C,iBAAiB,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;gBAC5C;YACF;QACF;IACF;IAGF,mCAAmC;IACnC,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,+BAA+B;IAC/B,IACE,CAAC,QACD,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aACrC,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,cACrC,QAAQ,OAAO,CAAC,QAAQ,KAAK,KAC7B;QACA,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,oDAAoD;IACpD,IACE,QACA,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aACnC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,GAChD;QACA,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO;AACT"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { updateSession } from '@/lib/supabase/middleware'\n\nexport async function middleware(request: any) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}"],"names":[],"mappings":";;;;;;AAAA;;AAEO,eAAe,WAAW,OAAY;IAC3C,OAAO,MAAM,IAAA,6JAAa,EAAC;AAC7B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;KAKC,GACD;KACD;AACH"}}]
}